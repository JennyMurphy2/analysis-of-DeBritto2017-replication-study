geom_boxplot(show.legend = FALSE) +
theme_minimal()
### Outliers check
rep_data %>%
identify_outliers(differences)
### Normality check
rep_data %>% shapiro_test(differences)
## Paired t-test  -----------------------------
rep_data_long$condition <- as.factor(rep_data_long$condition)
# R compares conditions alphabetically, I am reordering here to match the original study
rep_data_long$condition <- forcats::fct_relevel(rep_data_long$condition, "noncompressive", "compressive")
replication_ttest <- t.test(valgus_angle ~ condition, rep_data_long,
alternative = "two.sided", paired = TRUE, conf.level = 0.95) %>%
tidy()
replication_ttest
rep_dz <- d.dep.t.diff.t(t = replication_ttest$statistic, n = rep_desc$count[1], a = 0.05)
rep_dz
# Original study data ------
orig_data <- read_csv("original_data.csv")
head(orig_data)
# Convert to long dataset
orig_data_long <- orig_data %>%
gather(key = "condition", value = "valgus_angle", compressive, noncompressive)
head(orig_data_long, 3)
# add differences column to wide dataset
orig_data <- orig_data %>%
mutate(differences =  compressive - noncompressive)
## Original descriptives  ---------------
orig_desc <- orig_data_long %>%
group_by(condition) %>%
summarise(count = n(),
mean = mean(valgus_angle),
sd = sd(valgus_angle)) %>%
mutate(mean_diff = mean(orig_data$differences),
sd_diff = sd(orig_data$differences))
orig_desc
## Resolving assumptions  ---------------------------------------
## Distribution check
ggplot(orig_data_long, aes(valgus_angle)) +
geom_histogram(color="black", fill="white",
bins = 10)
ggplot(orig_data_long, aes(condition, valgus_angle, color = condition)) +
geom_boxplot(show.legend = FALSE) +
theme_minimal()
### Outliers check
orig_data %>%
identify_outliers(differences)
### Normality check
orig_data %>% shapiro_test(differences)
## Paired t-test  -----------------------------
original_ttest <- t.test(valgus_angle ~ condition, orig_data_long,
alternative = "two.sided", paired = TRUE, conf.level = 0.95) %>%
tidy()
original_ttest
### Original effect size calculation ------
orig_dz <- d.dep.t.diff.t(t = original_ttest$statistic, n = orig_desc$count[1], a = 0.05)
orig_dz
# Note - the calculated effect size is slightly different to the original (d = 0.58) so will check using Cohen's dav
orig_dav <- d.dep.t.avg(m1 = orig_desc$mean[1], m2 = orig_desc$mean[2],
sd1 = orig_desc$sd[1], sd2 = orig_desc$sd[2],
n = orig_desc$count[1], a = 0.05)
orig_dav
# This calculation matches the original to the decimal place
# Replication analyses - z-test with appropriate effect size --------
rep_test <- compare_smd(
smd1 = abs(orig_dz$d),
n1 = orig_desc$count[1],
smd2 = rep_dz$d,
n2 = rep_desc$count[1],
paired = TRUE,
alternative = "greater")
rep_test
replication_ttest <- t.test(valgus_angle ~ condition, rep_data_long,
alternative = "two.sided", paired = TRUE, conf.level = 0.95) %>%
tidy()
replication_ttest
options(scipen = 999)
# Load packages
library(stats)
library(rstatix)
library(TOSTER)
library(MOTE)
library(tidyverse)
set.seed(21)
# Replication data loading and prep ---------------------
rep_data <- read_csv("knee_valgus_data.csv")
head(rep_data)
# Convert to long dataset
rep_data_long <- rep_data %>%
gather(key = "condition", value = "valgus_angle", compressive, noncompressive)
head(rep_data_long, 3)
# add differences column to wide dataset
rep_data <- rep_data %>%
mutate(differences =  noncompressive - compressive)
## Replication descriptives  ---------------
rep_desc <- rep_data_long %>%
group_by(condition) %>%
summarise(count = n(),
mean = mean(valgus_angle),
sd = sd(valgus_angle)) %>%
mutate(mean_diff = mean(rep_data$differences),
sd_diff = sd(rep_data$differences))
## Resolving assumptions  ---------------------------------------
## Distribution check
ggplot(rep_data_long, aes(valgus_angle)) +
geom_histogram(color="black", fill="white",
bins = 10)
ggplot(rep_data_long, aes(condition, valgus_angle, color = condition)) +
geom_boxplot(show.legend = FALSE) +
theme_minimal()
### Outliers check
rep_data %>%
identify_outliers(differences)
### Normality check
rep_data %>% shapiro_test(differences)
## Paired t-test  -----------------------------
rep_data_long$condition <- as.factor(rep_data_long$condition)
# R compares conditions alphabetically, I am reordering here to match the original study
rep_data_long$condition <- forcats::fct_relevel(rep_data_long$condition, "noncompressive", "compressive")
replication_ttest <- t.test(valgus_angle ~ condition, rep_data_long,
alternative = "two.sided", paired = TRUE, conf.level = 0.95) %>%
tidy()
rep_test <- compare_smd(
smd1 = 0.65,
n1 = 27,
smd2 = -0.44,
n2 = 54,
paired = TRUE,
alternative = "greater")
rep_test
# Load packages
library(stats)
library(rstatix)
library(TOSTER)
library(MOTE)
library(tidyverse)
set.seed(21)
# Replication data loading and prep ---------------------
rep_data <- read_csv("knee_valgus_data.csv")
head(rep_data)
# Convert to long dataset
rep_data_long <- rep_data %>%
gather(key = "condition", value = "valgus_angle", compressive, noncompressive)
head(rep_data_long, 3)
# add differences column to wide dataset
rep_data <- rep_data %>%
mutate(differences =  noncompressive - compressive)
## Replication descriptives  ---------------
rep_desc <- rep_data_long %>%
group_by(condition) %>%
summarise(count = n(),
mean = mean(valgus_angle),
sd = sd(valgus_angle)) %>%
mutate(mean_diff = mean(rep_data$differences),
sd_diff = sd(rep_data$differences))
## Resolving assumptions  ---------------------------------------
## Distribution check
ggplot(rep_data_long, aes(valgus_angle)) +
geom_histogram(color="black", fill="white",
bins = 10)
ggplot(rep_data_long, aes(condition, valgus_angle, color = condition)) +
geom_boxplot(show.legend = FALSE) +
theme_minimal()
### Outliers check
rep_data %>%
identify_outliers(differences)
### Normality check
rep_data %>% shapiro_test(differences)
## Paired t-test  -----------------------------
rep_data_long$condition <- as.factor(rep_data_long$condition)
# R compares conditions alphabetically, I am reordering here to match the original study
rep_data_long$condition <- forcats::fct_relevel(rep_data_long$condition, "noncompressive", "compressive")
replication_ttest <- t.test(valgus_angle ~ condition, rep_data_long,
alternative = "two.sided", paired = TRUE, conf.level = 0.95) %>%
tidy()
orig_dz <- d.dep.t.diff.t(t = 3.388, n = 27, a = 0.05)
orig_dz
orig_dav <- d.dep.t.avg(m1 = 0.5787, m2 = 0.5214,
sd1 = 0.09313, sd2 = 0.10590,
n = 27, a = 0.05)
orig_dav
rep_dz <- d.dep.t.diff.t(t = -3.220, n = 54, a = 0.05)
rep_dz
rep_dav <- d.dep.t.avg(m1 = -0.1944, m2 = 0.5648,
sd1 = 3.35696, sd2 = 3.07958,
n = 54, a = 0.05)
rep_dav
rep_test <- compare_smd(
smd1 = 0.58,
n1 = 27,
smd2 = -0.24,
n2 = 54,
paired = TRUE,
alternative = "greater")
rep_test
# Load packages
library(stats)
library(rstatix)
library(TOSTER)
library(MOTE)
library(tidyverse)
set.seed(21)
# Replication data loading and prep ---------------------
rep_data <- read_csv("knee_valgus_data.csv")
head(rep_data)
# Convert to long dataset
rep_data_long <- rep_data %>%
gather(key = "condition", value = "valgus_angle", compressive, noncompressive)
head(rep_data_long, 3)
# add differences column to wide dataset
rep_data <- rep_data %>%
mutate(differences =  noncompressive - compressive)
## Replication descriptives  ---------------
rep_desc <- rep_data_long %>%
group_by(condition) %>%
summarise(count = n(),
mean = mean(valgus_angle),
sd = sd(valgus_angle)) %>%
mutate(mean_diff = mean(rep_data$differences),
sd_diff = sd(rep_data$differences))
## Resolving assumptions  ---------------------------------------
## Distribution check
ggplot(rep_data_long, aes(valgus_angle)) +
geom_histogram(color="black", fill="white",
bins = 10)
ggplot(rep_data_long, aes(condition, valgus_angle, color = condition)) +
geom_boxplot(show.legend = FALSE) +
theme_minimal()
### Outliers check
rep_data %>%
identify_outliers(differences)
### Normality check
rep_data %>% shapiro_test(differences)
## Paired t-test  -----------------------------
rep_data_long$condition <- as.factor(rep_data_long$condition)
# R compares conditions alphabetically, I am reordering here to match the original study
rep_data_long$condition <- forcats::fct_relevel(rep_data_long$condition, "noncompressive", "compressive")
View(rep_data)
replication_ttest <- t.test(rep_data$noncompressive, rep_data$compressive, paired = TRUE)
replication_ttest
rep_dz <- d.dep.t.diff.t(t = replication_ttest$statistic, n = rep_desc$count[1], a = 0.05)
rep_dz
# Original study data ------
orig_data <- read_csv("original_data.csv")
head(orig_data)
# Convert to long dataset
orig_data_long <- orig_data %>%
gather(key = "condition", value = "valgus_angle", compressive, noncompressive)
head(orig_data_long, 3)
# add differences column to wide dataset
orig_data <- orig_data %>%
mutate(differences =  compressive - noncompressive)
## Original descriptives  ---------------
orig_desc <- orig_data_long %>%
group_by(condition) %>%
summarise(count = n(),
mean = mean(valgus_angle),
sd = sd(valgus_angle)) %>%
mutate(mean_diff = mean(orig_data$differences),
sd_diff = sd(orig_data$differences))
orig_desc
## Resolving assumptions  ---------------------------------------
## Distribution check
ggplot(orig_data_long, aes(valgus_angle)) +
geom_histogram(color="black", fill="white",
bins = 10)
ggplot(orig_data_long, aes(condition, valgus_angle, color = condition)) +
geom_boxplot(show.legend = FALSE) +
theme_minimal()
### Outliers check
orig_data %>%
identify_outliers(differences)
### Normality check
orig_data %>% shapiro_test(differences)
## Paired t-test  -----------------------------
original_ttest <- t.test(valgus_angle ~ condition, orig_data_long,
alternative = "two.sided", paired = TRUE, conf.level = 0.95) %>%
tidy()
original_ttest <- t.test(orig_data$noncompressive, orig_data$compressive, paired = TRUE)
original_ttest
View(rep_desc)
rep_N = 54
ori_N = 27
rep_paired_correction = (rep_N-2)/(rep_N-1.25)
ori_paired_correction = (ori_N-2)/(ori_N-1.25)
rep_hedges <- rep_dz$d*rep_paired_correction
ori_hedges <- ori_dz$d*ori_paired_correction
### Original effect size calculation ------
orig_dz <- d.dep.t.diff.t(t = original_ttest$statistic, n = orig_desc$count[1], a = 0.05)
orig_dz
rep_hedges <- rep_dz$d*rep_paired_correction
ori_hedges <- ori_dz$d*ori_paired_correction
rep_hedges <- rep_dz$d*rep_paired_correction
ori_hedges <- orig_dz$d*ori_paired_correction
rep_test <- compare_smd(
smd1 = ori_hedges,
n1 = orig_values$N,
smd2 = rep_hedges,
n2 = summary_rep$count[1],
paired = TRUE,
alternative = "greater")
rep_test <- compare_smd(
smd1 = ori_hedges,
n1 = ori_N,
smd2 = rep_hedges,
n2 = summary_rep$count[1],
paired = TRUE,
alternative = "greater")
rep_test <- compare_smd(
smd1 = ori_hedges,
n1 = ori_N,
smd2 = rep_hedges,
n2 = rep_N,
paired = TRUE,
alternative = "greater")
rep_test
rep_test <- compare_smd(
smd1 = abs(orig_dav$d),
n1 = orig_desc$count[1],
smd2 = -rep_dav$d,
n2 = rep_desc$count[1],
paired = TRUE,
alternative = "greater")
# Note - the calculated effect size is slightly different to the original (d = 0.58) so will check using Cohen's dav
orig_dav <- d.dep.t.avg(m1 = orig_desc$mean[1], m2 = orig_desc$mean[2],
sd1 = orig_desc$sd[1], sd2 = orig_desc$sd[2],
n = orig_desc$count[1], a = 0.05)
orig_dav
# This calculation matches the original to the decimal place
# Replication analyses - z-test with appropriate effect size --------
rep_test <- compare_smd(
smd1 = abs(orig_dz$d),
n1 = orig_desc$count[1],
smd2 = rep_dz$d,
n2 = rep_desc$count[1],
paired = TRUE,
alternative = "greater")
rep_test
# Replication analyses - z-test with reported effect size --------
rep_test <- compare_smd(
smd1 = abs(orig_dav$d),
n1 = orig_desc$count[1],
smd2 = -rep_dav$d,
n2 = rep_desc$count[1],
paired = TRUE,
alternative = "greater")
rep_dz <- d.dep.t.diff.t(t = replication_ttest$statistic, n = rep_desc$count[1], a = 0.05)
rep_dz
rep_dav <- d.dep.t.avg(m1 = rep_desc$mean[1], m2 = rep_desc$mean[2],
sd1 = rep_desc$sd[1], sd2 = rep_desc$sd[2],
n = rep_desc$count[1], a = 0.05)
rep_dav
rep_test <- compare_smd(
smd1 = abs(orig_dav$d),
n1 = orig_desc$count[1],
smd2 = -rep_dav$d,
n2 = rep_desc$count[1],
paired = TRUE,
alternative = "greater")
rep_test
View(orig_dav)
View(rep_dav)
# Load packages
library(stats)
library(rstatix)
library(TOSTER)
library(MOTE)
library(tidyverse)
set.seed(21)
# Replication data loading and prep ---------------------
rep_data <- read_csv("knee_valgus_data.csv")
head(rep_data)
# Convert to long dataset
rep_data_long <- rep_data %>%
gather(key = "condition", value = "valgus_angle", compressive, noncompressive)
head(rep_data_long, 3)
# add differences column to wide dataset
rep_data <- rep_data %>%
mutate(differences =  noncompressive - compressive)
## Replication descriptives  ---------------
rep_desc <- rep_data_long %>%
group_by(condition) %>%
summarise(count = n(),
mean = mean(valgus_angle),
sd = sd(valgus_angle)) %>%
mutate(mean_diff = mean(rep_data$differences),
sd_diff = sd(rep_data$differences))
## Resolving assumptions  ---------------------------------------
## Distribution check
ggplot(rep_data_long, aes(valgus_angle)) +
geom_histogram(color="black", fill="white",
bins = 10)
ggplot(rep_data_long, aes(condition, valgus_angle, color = condition)) +
geom_boxplot(show.legend = FALSE) +
theme_minimal()
### Outliers check
rep_data %>%
identify_outliers(differences)
### Normality check
rep_data %>% shapiro_test(differences)
## Paired t-test  -----------------------------
rep_data_long$condition <- as.factor(rep_data_long$condition)
# R compares conditions alphabetically, I am reordering here to match the original study
rep_data_long$condition <- forcats::fct_relevel(rep_data_long$condition, "noncompressive", "compressive")
#replication_ttest <- t.test(valgus_angle ~ condition, rep_data_long,
#                            alternative = "two.sided", paired = TRUE, conf.level = 0.95) %>%
#  tidy()
#replication_ttest
replication_ttest <- t.test(rep_data$noncompressive, rep_data$compressive, paired = TRUE)
replication_ttest
### Replication effect size calculation ------
rep_dz <- d.dep.t.diff.t(t = replication_ttest$statistic, n = rep_desc$count[1], a = 0.05)
rep_dz
rep_dav <- d.dep.t.avg(m1 = rep_desc$mean[1], m2 = rep_desc$mean[2],
sd1 = rep_desc$sd[1], sd2 = rep_desc$sd[2],
n = rep_desc$count[1], a = 0.05)
rep_dav
# Original study data ------
orig_data <- read_csv("original_data.csv")
head(orig_data)
# Convert to long dataset
orig_data_long <- orig_data %>%
gather(key = "condition", value = "valgus_angle", compressive, noncompressive)
head(orig_data_long, 3)
# add differences column to wide dataset
orig_data <- orig_data %>%
mutate(differences =  compressive - noncompressive)
## Original descriptives  ---------------
orig_desc <- orig_data_long %>%
group_by(condition) %>%
summarise(count = n(),
mean = mean(valgus_angle),
sd = sd(valgus_angle)) %>%
mutate(mean_diff = mean(orig_data$differences),
sd_diff = sd(orig_data$differences))
orig_desc
## Resolving assumptions  ---------------------------------------
## Distribution check
ggplot(orig_data_long, aes(valgus_angle)) +
geom_histogram(color="black", fill="white",
bins = 10)
ggplot(orig_data_long, aes(condition, valgus_angle, color = condition)) +
geom_boxplot(show.legend = FALSE) +
theme_minimal()
### Outliers check
orig_data %>%
identify_outliers(differences)
### Normality check
orig_data %>% shapiro_test(differences)
## Paired t-test  -----------------------------
#original_ttest <- t.test(valgus_angle ~ condition, orig_data_long,
#                        alternative = "two.sided", paired = TRUE, conf.level = 0.95) %>%
#  tidy()
#original_ttest
original_ttest <- t.test(orig_data$noncompressive, orig_data$compressive, paired = TRUE)
original_ttest
### Original effect size calculation ------
orig_dz <- d.dep.t.diff.t(t = original_ttest$statistic, n = orig_desc$count[1], a = 0.05)
orig_dz
# Note - the calculated effect size is slightly different to the original (d = 0.58) so will check using Cohen's dav
orig_dav <- d.dep.t.avg(m1 = orig_desc$mean[1], m2 = orig_desc$mean[2],
sd1 = orig_desc$sd[1], sd2 = orig_desc$sd[2],
n = orig_desc$count[1], a = 0.05)
orig_dav
# This calculation matches the original to the decimal place
# Replication analyses - z-test with appropriate effect size --------
rep_test <- compare_smd(
smd1 = abs(orig_dz$d),
n1 = orig_desc$count[1],
smd2 = rep_dz$d,
n2 = rep_desc$count[1],
paired = TRUE,
alternative = "greater")
rep_test
# Replication analyses - z-test with reported effect size --------
rep_test <- compare_smd(
smd1 = abs(orig_dav$d),
n1 = orig_desc$count[1],
smd2 = -rep_dav$d,
n2 = rep_desc$count[1],
paired = TRUE,
alternative = "greater")
rep_test
library(rstatix)
## Calculate Hedges------
rep_N = 54
ori_N = 27
rep_hedges_correction = (1-(3/(4*rep_N - 9))) #Lakens et al 2013
ori_hedges_correction = (1-(3/(4*ori_N - 9))) #Lakens et al 2013
rep_hedges <- rep_dz$d*rep_hedges_correction
ori_hedges <- ori_dz$d*rep_hedges_correction
library(rstatix)
## Calculate Hedges------
rep_N = 54
ori_N = 27
rep_hedges_correction = (1-(3/(4*rep_N - 9))) #Lakens et al 2013
ori_hedges_correction = (1-(3/(4*ori_N - 9))) #Lakens et al 2013
rep_hedges <- rep_dz$d*rep_hedges_correction
ori_hedges <- orig_dz$d*rep_hedges_correction
## Z-test Hedges --------
rep_test <- compare_smd(
smd1 = ori_hedges,
n1 = ori_N,
smd2 = rep_hedges,
n2 = rep_N,
paired = TRUE,
alternative = "greater")
rep_test
rep_hedges <- rep_dz$d*rep_hedges_correction
rep_hedges
ori_hedges <- orig_dz$d*rep_hedges_correction
ori_hedges
